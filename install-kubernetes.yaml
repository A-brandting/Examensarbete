---
# PLAY 1: ALL NODES
- name: Install Kubernetes on all nodes
  hosts: cluster
  become: true 

  vars_files:
    - vault.yaml # Krypterad lösenordsfil som lagras på Ansible-hosten

  vars:
    ansible_become_pass: "{{ become_password }}"

  tasks:

    # Installerar beroenden för installation av Containerd och Kubernetes
    - name: Install required packages (apt-transport-https, ca-certificates, curl, gpg)
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
          - lsb-release
          - gnupg

        state: present
        update_cache: yes

    # Stänger av swapoff
    - name: Disable swapoff
      ansible.builtin.shell: "swapoff -a"

    # Tar bort swapoff från FSTAB
    - name: Comment out swap entry in /etc/fstab to disable swap
      ansible.builtin.lineinfile:
        path: "/etc/fstab"
        line: ''
        regexp: '^/swap.img*'

    # Enablar IPv4 Forwarding
    - name: Create k8s sysctl configuration file to enable IPv4 forwarding
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.ipv4.ip_forward = 1
        owner: root
        group: root
        mode: '0644'
    
    # Laddar in inställningarna
    - name: Apply sysctl settings
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    # Laddar till Dockers repository nyckel (Samma som för Containerd)
    - name: Add Docker GPG key for repository
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    
    # Lägger till repository för Containerd
    - name: Add Docker repository for containerd
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable"
        state: present
    
    # Installerar Containerd
    - name: Install Containerd
      ansible.builtin.apt:
        name:
          - containerd.io
        state: present
        update_cache: yes

    # Lägger till kernel moduler för nätverk
    - name: Create /etc/modules-load.d/k8s.conf to load overlay and br_netfilter modules
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'

    - name: Load overlay module
      ansible.builtin.modprobe:
        name: overlay

    - name: Load br_netfilter module
      ansible.builtin.modprobe:
        name: br_netfilter

    - name: Create /etc/sysctl.d/k8s.conf for Kubernetes settings
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        owner: root
        group: root
        mode: '0644'

    - name: Apply sysctl settings
      ansible.builtin.sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        state: present
        reload: yes

    - name: Apply sysctl settings for bridge-nf-call-ip6tables
      ansible.builtin.sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: 1
        state: present
        reload: yes

    - name: Apply sysctl settings for ip_forward
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present
        reload: yes

    - name: Reload sysctl configuration
      ansible.builtin.command:
        cmd: sysctl --system

    # Skapar default configfil för Containerd (Config.toml)
    - name: Create default containerd config
      ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
    
    # Ändrar värdet på SystemCgroup i configfilen
    - name: Change SystemCgroup in config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup = false'
        line: "            SystemdCgroup = true"
        state: present
    
    # Ändrar värdet för att tillåta TCP-anslutningar (Config.toml)
    - name: Enable TCP service
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*disable_tcp_service = true'
        line: "    disable_tcp_service = false"
        state: present

    # Startar om Containerd efter uppdatering av config
    - name: Restart containerd service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: yes     


    # Lägger till nyckel för Kubernetes repository
    - name: Download the Kubernetes GPG signing key
      ansible.builtin.shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      args:
        creates: "/etc/apt/keyrings/kubernetes-apt-keyring.gpg"
    
    # Lägger till Kubernetes repository
    - name: Add the Kubernetes repository
      ansible.builtin.shell: "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"

    # Uppdaterar cachen efter tillägg av repository
    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes
    
    # Installerar verktyg för Kubernetes
    - name: Install Kubernetes packages (kubeadm, kubelet, kubectl)
      ansible.builtin.apt:
        name:
          - kubeadm
          - kubelet 
          - kubectl
        state: present

    # Installera Python3 och pip (Behövs för att kunna installera kubernetes-paket)
    - name: Install Python 3 and pip
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
        state: present
        update_cache: yes

    # Install Kubernetes Python client
    - name: Install Kubernetes Python client
      ansible.builtin.pip:
        name: kubernetes
        break_system_packages: true
        state: present


# PLAY 2: Masternode
- name: Create cluster
  hosts: masternodes
  become: true
  vars_files:
    - vault.yaml
  vars:
    ansible_become_pass: "{{ become_password }}"

  tasks:

    # Tar ner alla images innan start av klustret
    - name: Pull Kubernetes images
      ansible.builtin.command:
        cmd: kubeadm config images pull

    # Initierar klustret med IP-range för att match med Calico:s nätverksplugin
    - name: Initialize cluster
      ansible.builtin.command:
        cmd: kubeadm init --pod-network-cidr=192.168.0.0/16
      register: kubeadm_output
      args:
        creates: /etc/kubernetes/kubelet.conf

    # Skapar Kube directory för användaren
    - name: Create Kube directory
      ansible.builtin.command:
        cmd: mkdir -p /home/administrator/.kube
    # Kopierar över kubelet config från admin.conf
    - name: Copy config to kube directory
      ansible.builtin.command:
        cmd: cp -i /etc/kubernetes/admin.conf /home/administrator/.kube/config
      args:
        creates: /home/administrator/.kube/config
    
    # Ändrar rättigheter för configfilen (Gör den åtkomlig för användarkontot)
    - name: Change config permission
      ansible.builtin.shell: |
        chown administrator:administrator /home/administrator/.kube/config

    # Installerar nätverksplugin till klustret (Calico)
    - name: Install Calico
      ansible.builtin.command:
        kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      become_user: administrator

    # Skapar en join token för att senare kunna ansluta workernodes
    - name: Create kubeadm token
      ansible.builtin.command:
        cmd: kubeadm token create --print-join-command
      register: join_token
      args:
        creates: join_token
    
    # Sparar join token temporärt på Ansiblenoden
    - name: Save generated token
      ansible.builtin.copy:
        content: "{{ join_token.stdout }}"
        dest: /tmp/join_token
      delegate_to: localhost
      
# PLAY 3: WORKERNODES
- name: Join cluster
  hosts: workernodes
  become: true
  vars_files:
    - vault.yaml
    
  vars: 
    ansible_become_pass: "{{ become_password }}"
    
  tasks:
    # Kopierar över join token till workernodsen
    - name: Copy join_token to workernodes
      ansible.builtin.copy:
        src: /tmp/join_token
        dest: /tmp/join_token.sh
        mode: '0755'
    
    # Ansluter workernodsen till klustret
    - name: Join workers to cluster
      ansible.builtin.shell:
        cmd: /tmp/join_token.sh
      args:
        creates: /etc/kubernetes/kubelet.conf

# PLAY 4: Install Kubectl on localhost
- name: Install Kubectl on localhost
  hosts: localhost
  become: true
  vars_files:
    - vault.yaml
    
  vars: 
    ansible_become_pass: "{{ become_password }}"
    
  tasks:

    # Installerar beroenden för kubectl
    - name: Install required packages (apt-transport-https, ca-certificates, curl, gpg)
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
          - lsb-release
          - gnupg

        state: present
        update_cache: yes


      # Lägger till nyckel för Kubernetes repository
    - name: Download the Kubernetes GPG signing key
      ansible.builtin.shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      args:
        creates: "/etc/apt/keyrings/kubernetes-apt-keyring.gpg"
    
    # Lägger till Kubernetes repository
    - name: Add the Kubernetes repository
      ansible.builtin.shell: "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"

    # Uppdaterar cachen efter tillägg av repository
    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes
    
    # Installerar verktyg för Kubernetes
    - name: Install kubectl on localhost
      ansible.builtin.apt:
        name:
          - kubectl
        state: present

    # Installera Python3 och pip (Behövs för att kunna installera kubernetes-paket)
    - name: Install Python 3 and pip
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
        state: present
        update_cache: yes

    # Installerar Kubernetes Python client
    - name: Install Kubernetes Python client
      ansible.builtin.pip:
        name: kubernetes
        break_system_packages: true
        state: present
    
    # Ser till att /.kube foldern existerar på localhost
    - name: Create kube directory
      ansible.builtin.file:
        path: /home/administrator/.kube/
        state: directory
        mode: '0755'
    

# PLAY 5: Kopierar över Kubeconfig till Localhost (För att kubectl ska fungera)
- name: Kopiera kubeconfig från masternoden till localhost
  hosts: masternodes  
  become: true
  vars_files:
    - vault.yaml
  vars: 
    ansible_become_pass: "{{ become_password }}"
  tasks:

    # Kopierar över Kubeconfig till localhost (För att kubectl ska fungera)
    - name: Fetch kubeconfig from masternode to localhost
      ansible.builtin.fetch:
        src: "/etc/kubernetes/admin.conf"
        dest: /home/administrator/.kube/config
        flat: yes